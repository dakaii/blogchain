syntax = "proto3";
package blogchain.blog.v1;

import "amino/amino.proto";
import "blogchain/blog/v1/params.proto";
import "blogchain/blog/v1/post.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "blogchain/x/blog/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/blogchain/blog/v1/params";
  }

  // Posts queries all posts with pagination
  rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {
    option (google.api.http).get = "/blogchain/blog/v1/posts";
  }

  // Post queries a single post by id
  rpc Post(QueryPostRequest) returns (QueryPostResponse) {
    option (google.api.http).get = "/blogchain/blog/v1/posts/{id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryPostsRequest is request type for the Query/Posts RPC method.
message QueryPostsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPostsResponse is response type for the Query/Posts RPC method.
message QueryPostsResponse {
  repeated Post posts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPostRequest is request type for the Query/Post RPC method.
message QueryPostRequest {
  uint64 id = 1;
}

// QueryPostResponse is response type for the Query/Post RPC method.
message QueryPostResponse {
  Post post = 1 [(gogoproto.nullable) = false];
}
