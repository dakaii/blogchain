// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blogchain/blog/v1/comment.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Comment defines a comment on a post or another comment
type Comment struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PostId    uint64 `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	ParentId  uint64 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Creator   string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Likes     uint64 `protobuf:"varint,8,opt,name=likes,proto3" json:"likes,omitempty"`
	Deleted   bool   `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeletedAt int64  `protobuf:"varint,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Depth     uint32 `protobuf:"varint,11,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d587f5ea2cf8dc74, []int{0}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetPostId() uint64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *Comment) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Comment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Comment) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Comment) GetLikes() uint64 {
	if m != nil {
		return m.Likes
	}
	return 0
}

func (m *Comment) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Comment) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *Comment) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

// CommentThread represents a comment with its replies
type CommentThread struct {
	Comment Comment          `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment"`
	Replies []*CommentThread `protobuf:"bytes,2,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (m *CommentThread) Reset()         { *m = CommentThread{} }
func (m *CommentThread) String() string { return proto.CompactTextString(m) }
func (*CommentThread) ProtoMessage()    {}
func (*CommentThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_d587f5ea2cf8dc74, []int{1}
}
func (m *CommentThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentThread.Merge(m, src)
}
func (m *CommentThread) XXX_Size() int {
	return m.Size()
}
func (m *CommentThread) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentThread.DiscardUnknown(m)
}

var xxx_messageInfo_CommentThread proto.InternalMessageInfo

func (m *CommentThread) GetComment() Comment {
	if m != nil {
		return m.Comment
	}
	return Comment{}
}

func (m *CommentThread) GetReplies() []*CommentThread {
	if m != nil {
		return m.Replies
	}
	return nil
}

// CommentStats tracks comment statistics for a post
type CommentStats struct {
	PostId         uint64 `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	TotalComments  uint64 `protobuf:"varint,2,opt,name=total_comments,json=totalComments,proto3" json:"total_comments,omitempty"`
	ActiveComments uint64 `protobuf:"varint,3,opt,name=active_comments,json=activeComments,proto3" json:"active_comments,omitempty"`
	LastCommentAt  int64  `protobuf:"varint,4,opt,name=last_comment_at,json=lastCommentAt,proto3" json:"last_comment_at,omitempty"`
}

func (m *CommentStats) Reset()         { *m = CommentStats{} }
func (m *CommentStats) String() string { return proto.CompactTextString(m) }
func (*CommentStats) ProtoMessage()    {}
func (*CommentStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d587f5ea2cf8dc74, []int{2}
}
func (m *CommentStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentStats.Merge(m, src)
}
func (m *CommentStats) XXX_Size() int {
	return m.Size()
}
func (m *CommentStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentStats.DiscardUnknown(m)
}

var xxx_messageInfo_CommentStats proto.InternalMessageInfo

func (m *CommentStats) GetPostId() uint64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *CommentStats) GetTotalComments() uint64 {
	if m != nil {
		return m.TotalComments
	}
	return 0
}

func (m *CommentStats) GetActiveComments() uint64 {
	if m != nil {
		return m.ActiveComments
	}
	return 0
}

func (m *CommentStats) GetLastCommentAt() int64 {
	if m != nil {
		return m.LastCommentAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Comment)(nil), "blogchain.blog.v1.Comment")
	proto.RegisterType((*CommentThread)(nil), "blogchain.blog.v1.CommentThread")
	proto.RegisterType((*CommentStats)(nil), "blogchain.blog.v1.CommentStats")
}

func init() { proto.RegisterFile("blogchain/blog/v1/comment.proto", fileDescriptor_d587f5ea2cf8dc74) }

var fileDescriptor_d587f5ea2cf8dc74 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0xf6, 0x3a, 0xbe, 0x38, 0xde, 0xe0, 0x9c, 0x58, 0x9d, 0x60, 0x75, 0x08, 0x9f, 0x15, 0x09,
	0x70, 0x65, 0x73, 0x47, 0x47, 0x97, 0xa3, 0xba, 0xd6, 0x50, 0xd1, 0x44, 0x7b, 0xde, 0x55, 0x62,
	0xe1, 0xf3, 0x5a, 0xde, 0x21, 0x82, 0x27, 0xa0, 0xe5, 0x0d, 0xe8, 0x78, 0x96, 0x2b, 0x53, 0x52,
	0x21, 0x94, 0xbc, 0x08, 0xda, 0x1f, 0x27, 0x20, 0x44, 0x37, 0xdf, 0xdf, 0xac, 0x3d, 0x33, 0xf8,
	0xe2, 0xb6, 0x91, 0xab, 0x6a, 0xcd, 0xea, 0xb6, 0xd0, 0x55, 0xb1, 0xb9, 0x2c, 0x2a, 0x79, 0x77,
	0x27, 0x5a, 0xc8, 0xbb, 0x5e, 0x82, 0x24, 0x0f, 0x0f, 0x86, 0x5c, 0x57, 0xf9, 0xe6, 0xf2, 0xfc,
	0x6c, 0x25, 0x57, 0xd2, 0xa8, 0x85, 0xae, 0xac, 0x71, 0xfe, 0xdd, 0xc7, 0xe1, 0x1b, 0x1b, 0x25,
	0x33, 0xec, 0xd7, 0x9c, 0xa2, 0x14, 0x65, 0x41, 0xe9, 0xd7, 0x9c, 0x3c, 0xc6, 0x61, 0x27, 0x15,
	0x2c, 0x6b, 0x4e, 0x7d, 0x43, 0x8e, 0x35, 0xbc, 0xe1, 0xe4, 0x09, 0x8e, 0x3a, 0xd6, 0x8b, 0xd6,
	0x48, 0x23, 0x23, 0x4d, 0x2c, 0x71, 0xc3, 0x09, 0xc5, 0x61, 0xd5, 0x0b, 0x06, 0xb2, 0xa7, 0x41,
	0x8a, 0xb2, 0xa8, 0x1c, 0xa0, 0x51, 0x64, 0x0b, 0xa2, 0x05, 0x7a, 0xe2, 0x14, 0x0b, 0xc9, 0x53,
	0x8c, 0x8d, 0x49, 0xf0, 0x25, 0x03, 0x3a, 0x4e, 0x51, 0x36, 0x2a, 0x23, 0xc7, 0x2c, 0x8c, 0xfc,
	0xb1, 0xe3, 0x83, 0x1c, 0x5a, 0xd9, 0x31, 0x0b, 0x20, 0x67, 0xf8, 0xa4, 0xa9, 0x3f, 0x08, 0x45,
	0x27, 0xe6, 0x53, 0x2c, 0xd0, 0xaf, 0x71, 0xd1, 0x08, 0x10, 0x9c, 0x46, 0x29, 0xca, 0x26, 0xe5,
	0x00, 0x75, 0x3b, 0x57, 0xea, 0x76, 0xd8, 0xb6, 0x73, 0x8c, 0x6d, 0xc7, 0x45, 0x07, 0x6b, 0x3a,
	0x4d, 0x51, 0x16, 0x97, 0x16, 0xcc, 0xbf, 0x20, 0x1c, 0xbb, 0x41, 0xbd, 0x5b, 0xf7, 0x82, 0x71,
	0xf2, 0x5a, 0xff, 0x8e, 0x21, 0xcc, 0xcc, 0xa6, 0x57, 0xe7, 0xf9, 0x3f, 0x53, 0xcf, 0x5d, 0xe4,
	0x3a, 0xb8, 0xff, 0x79, 0xe1, 0x95, 0x43, 0x40, 0x67, 0x7b, 0xd1, 0x35, 0xb5, 0x50, 0xd4, 0x4f,
	0x47, 0xd9, 0xf4, 0x2a, 0xfd, 0x7f, 0xd6, 0x3e, 0x57, 0x0e, 0x81, 0xf9, 0x37, 0x84, 0x1f, 0x38,
	0xe9, 0x2d, 0x30, 0x50, 0x7f, 0xee, 0x09, 0xfd, 0xb5, 0xa7, 0x67, 0x78, 0x06, 0x12, 0x58, 0xb3,
	0x74, 0xcf, 0x2a, 0xb7, 0xc7, 0xd8, 0xb0, 0xae, 0x87, 0x22, 0x2f, 0xf0, 0x29, 0xab, 0xa0, 0xde,
	0x88, 0xa3, 0xcf, 0x2e, 0x75, 0x66, 0xe9, 0x83, 0xf1, 0x39, 0x3e, 0x6d, 0x98, 0x82, 0xc1, 0xa6,
	0xa7, 0x17, 0x98, 0xe9, 0xc5, 0x9a, 0x76, 0xb6, 0x05, 0x5c, 0xbf, 0xbc, 0xdf, 0x25, 0x68, 0xbb,
	0x4b, 0xd0, 0xaf, 0x5d, 0x82, 0xbe, 0xee, 0x13, 0x6f, 0xbb, 0x4f, 0xbc, 0x1f, 0xfb, 0xc4, 0x7b,
	0xff, 0xe8, 0x78, 0xb8, 0x9f, 0xec, 0xe9, 0xc2, 0xe7, 0x4e, 0xa8, 0xdb, 0xb1, 0xb9, 0xc6, 0x57,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x32, 0x5f, 0xd3, 0x5c, 0xd9, 0x02, 0x00, 0x00,
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Depth != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x58
	}
	if m.DeletedAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Likes != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Likes))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.ParentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x18
	}
	if m.PostId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replies) > 0 {
		for iNdEx := len(m.Replies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommentStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommentAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.LastCommentAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ActiveComments != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ActiveComments))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalComments != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.TotalComments))
		i--
		dAtA[i] = 0x10
	}
	if m.PostId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComment(dAtA []byte, offset int, v uint64) int {
	offset -= sovComment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovComment(uint64(m.Id))
	}
	if m.PostId != 0 {
		n += 1 + sovComment(uint64(m.PostId))
	}
	if m.ParentId != 0 {
		n += 1 + sovComment(uint64(m.ParentId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovComment(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovComment(uint64(m.UpdatedAt))
	}
	if m.Likes != 0 {
		n += 1 + sovComment(uint64(m.Likes))
	}
	if m.Deleted {
		n += 2
	}
	if m.DeletedAt != 0 {
		n += 1 + sovComment(uint64(m.DeletedAt))
	}
	if m.Depth != 0 {
		n += 1 + sovComment(uint64(m.Depth))
	}
	return n
}

func (m *CommentThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Comment.Size()
	n += 1 + l + sovComment(uint64(l))
	if len(m.Replies) > 0 {
		for _, e := range m.Replies {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	return n
}

func (m *CommentStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostId != 0 {
		n += 1 + sovComment(uint64(m.PostId))
	}
	if m.TotalComments != 0 {
		n += 1 + sovComment(uint64(m.TotalComments))
	}
	if m.ActiveComments != 0 {
		n += 1 + sovComment(uint64(m.ActiveComments))
	}
	if m.LastCommentAt != 0 {
		n += 1 + sovComment(uint64(m.LastCommentAt))
	}
	return n
}

func sovComment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComment(x uint64) (n int) {
	return sovComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Likes", wireType)
			}
			m.Likes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Likes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replies = append(m.Replies, &CommentThread{})
			if err := m.Replies[len(m.Replies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalComments", wireType)
			}
			m.TotalComments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalComments |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveComments", wireType)
			}
			m.ActiveComments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveComments |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommentAt", wireType)
			}
			m.LastCommentAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommentAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComment = fmt.Errorf("proto: unexpected end of group")
)
